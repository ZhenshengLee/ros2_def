"""Python wrapper of the rosbag2_cpp reader API"""
from __future__ import annotations
import rosbag2_py._reader
import rosbag2_py._storage
import typing

__all__ = [
    "SequentialCompressionReader",
    "SequentialReader",
    "get_registered_readers"
]


class SequentialCompressionReader():
    def __init__(self) -> None: ...
    def get_all_topics_and_types(self) -> typing.List[rosbag2_py._storage.TopicMetadata]: ...
    def has_next(self) -> bool: ...
    def open(self, arg0: rosbag2_py._storage.StorageOptions, arg1: rosbag2_py._storage.ConverterOptions) -> None: ...
    def read_next(self) -> tuple: ...
    def reset_filter(self) -> None: ...
    def seek(self, arg0: int) -> None: ...
    def set_filter(*args, **kwargs) -> typing.Any: ...


class SequentialReader():
    def __init__(self) -> None: ...
    def get_all_topics_and_types(self) -> typing.List[rosbag2_py._storage.TopicMetadata]: ...
    def has_next(self) -> bool: ...
    def open(self, arg0: rosbag2_py._storage.StorageOptions, arg1: rosbag2_py._storage.ConverterOptions) -> None: ...
    def read_next(self) -> tuple[str, bytes, int]: ...
    def reset_filter(self) -> None: ...
    def seek(self, arg0: int) -> None: ...
    def set_filter(*args, **kwargs) -> typing.Any: ...


def get_registered_readers() -> typing.Set[str]:
    """
    Returns list of discovered plugins that support rosbag2 playback.
    """
